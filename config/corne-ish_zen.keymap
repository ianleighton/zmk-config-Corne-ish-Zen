/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "QWERTY";
                        bindings = <
// |---------------|------|------|------|------|------|      |------|------|------|------|---------|------
    &kp TAB         &kp Q  &kp W  &kp E  &kp R  &kp T         &kp Y  &kp U  &kp I  &kp O  &kp P    &kp BSPC
// |---------------|------|------|------|------|------|      |------|------|------|------|---------|------
    &mt LCTRL ESC   &kp A  &kp S  &kp D  &kp F  &kp G         &kp H  &kp J  &kp K  &kp L  &kp SEMI &kp SQT
// |---------------|------|------|------|------|------|      |------|------|------|------|---------|------
    &mt LSHFT CLCK  &kp Z  &kp X  &kp C  &kp V  &kp B         &kp N  &kp M  &kp COMMA &kp DOT &kp FSLH &mt RSHFT BSLH
// |---------------|------|------|------|------|------|      |------|------|------|------|---------|------
            &kp LALT       &mt LCMD RET    &lt 1 SPACE        &lt 1 SPACE   &mt RCMD RET  &lt 2 BSPC
                        >;
                };
                lower_layer {
                        label = "NUMBER";
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 |  [  |  ]  |     |   |  \  |  4  |  5  |  6  |  -  |   =  |
// | SHFT |     |     |     |     |     |   |  0  |  1  |  2  |  3  |  [  |   ]  |
//                    | GUI |     | SPC |   |     |     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5   &kp N6    &kp N7   &kp N8  &kp N9   &kp N0     &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &kp LBRC     &kp RBKT     &trans   &trans    &kp N4   &kp N5  &kp N6   &kp MINUS  &kp EQUAL
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans   &kp N0    &kp N1   &kp N2  &kp N3   &kp LBRC   &kp LBRC
                          	        &kp LALT &kp LCMD             &trans   &trans    &trans   &trans
                        >;
                };

                raise_layer {
                        label = "SYMBOL";
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |     |     |     |  up |     | BKSP |
// | CTRL |     |     |     |     |     |   |     |     |  L  |  dn |  R  |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     | RET  |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &trans     &trans    &kp UP     &trans    &trans  &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &trans     &kp LEFT  &kp DOWN   &kp RIGHT &trans    &trans
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &trans     &kp PLUS  &trans     &trans    &trans    &trans
                    	     &kp LALT &kp LCMD &kp RET     &kp SPACE  &trans    &trans
                        >;
                };
        };
    combos {
        compatible = "zmk,combos";
        //ção combo
        combo_cao {
            timeout-ms = <50>;
            key-positions = <27 9>;
            bindings = <&kp LA(C) &kp LA(N) &kp A &kp O>;
        };
        // some modifiers
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_enter {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp RET>;
        };
        // number row vertical combos
        combo_grave {
            timeout-ms = <50>;
            key-positions = <0 12>;
            bindings = <&kp GRAVE>;
        };
        combo_1 {
            timeout-ms = <50>;
            key-positions = <1 13>;
            bindings = <&kp N1>;
        };
        combo_2 {
            timeout-ms = <50>;
            key-positions = <2 14>;
            bindings = <&kp N2>;
        };
        combo_3 {
            timeout-ms = <50>;
            key-positions = <3 15>;
            bindings = <&kp N3>;
        };
        combo_4 {
            timeout-ms = <50>;
            key-positions = <4 16>;
            bindings = <&kp N4>;
        };
        combo_5 {
            timeout-ms = <50>;
            key-positions = <5 17>;
            bindings = <&kp N5>;
        };
        combo_6 {
            timeout-ms = <50>;
            key-positions = <6 18>;
            bindings = <&kp N6>;
        };
        combo_7 {
            timeout-ms = <50>;
            key-positions = <7 19>;
            bindings = <&kp N7>;
        };
        combo_8 {
            timeout-ms = <50>;
            key-positions = <8 20>;
            bindings = <&kp N8>;
        };
        combo_9 {
            timeout-ms = <50>;
            key-positions = <9 21>;
            bindings = <&kp N9>;
        };
        combo_0 {
            timeout-ms = <50>;
            key-positions = <10 22>;
            bindings = <&kp N0>;
        };
        // symbols
        combo_minus {
            timeout-ms = <50>;
            key-positions = <19 31>;
            bindings = <&kp MINUS>;
        };
        combo_equal{
            timeout-ms = <50>;
            key-positions = <20 32>;
            bindings = <&kp EQUAL>;
        };
        combo_leftbrace {
            timeout-ms = <50>;
            key-positions = <21 33>;
            bindings = <&kp LBRC>;
        };
        combo_rightbrace {
            timeout-ms = <50>;
            key-positions = <22 34>;
            bindings = <&kp RBRC>;
        };
    };
};